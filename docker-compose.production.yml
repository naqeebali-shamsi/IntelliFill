version: '3.8'

services:
  postgres:
    image: postgres:15.5-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-intellifill}
      POSTGRES_USER: ${DB_USER:-intellifill}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-intellifill}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  redis:
    image: redis:7.2.3-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  app:
    build: 
      context: .
      dockerfile: Dockerfile.optimized
      cache_from:
        - intellifill:latest
    image: intellifill:latest
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER:-intellifill}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-intellifill}
      REDIS_URL: redis://redis:6379
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-15}
    secrets:
      - jwt_secret
      - jwt_refresh_secret
      - db_password
    volumes:
      - app_uploads:/app/uploads
      - app_outputs:/app/outputs
      - app_models:/app/models
      - app_logs:/app/logs
    networks:
      - backend
      - frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  worker:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    image: intellifill:latest
    restart: unless-stopped
    command: node dist/workers/queue-processor.js
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-intellifill}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-intellifill}
      REDIS_URL: redis://redis:6379
    secrets:
      - db_password
    volumes:
      - app_uploads:/app/uploads:ro
      - app_outputs:/app/outputs
      - app_models:/app/models:ro
      - app_logs:/app/logs
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 384M

  web:
    build:
      context: ./web
      dockerfile: Dockerfile.optimized
      args:
        REACT_APP_API_URL: ${API_URL:-http://localhost:3000/api}
    image: intellifill-web:latest
    restart: unless-stopped
    networks:
      - frontend
    depends_on:
      - app
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M

  nginx:
    image: nginx:1.25.3-alpine
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
    depends_on:
      - app
      - web
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M

  prometheus:
    image: prom/prometheus:v2.47.2
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:10.2.2
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_INSTALL_PLUGINS: redis-datasource
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
      - frontend
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_uploads:
    driver: local
  app_outputs:
    driver: local
  app_models:
    driver: local
  app_logs:
    driver: local

secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
  jwt_refresh_secret:
    external: true
  grafana_password:
    external: true