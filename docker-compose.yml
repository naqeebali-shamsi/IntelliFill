version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: intellifill
      POSTGRES_USER: intellifill
      POSTGRES_PASSWORD: ${DB_PASSWORD:-intellifill123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intellifill"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: 
      context: .
      dockerfile: Dockerfile.simple
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://intellifill:${DB_PASSWORD:-intellifill123}@postgres:5432/intellifill
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-refresh-secret-key-here}
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: 15
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile.simple
    command: npx ts-node src/workers/queue-processor.ts
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://intellifill:${DB_PASSWORD:-intellifill123}@postgres:5432/intellifill
      REDIS_URL: redis://redis:6379
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
    ports:
      - "3001:80"
    depends_on:
      - app
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3002:3000"
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: